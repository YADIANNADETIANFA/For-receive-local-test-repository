--	同一个进程同一时刻只能在一个CPU核内运行（不严谨，需要补充操作系统知识）

--	并发：当有多个线程在操作时，如果系统只有一个CPU核，他根本不可能真正同时运行一个以上线程，他只能把CPU核运行时间划分为若干个
		  时间片，再将时间片分给各个线程来执行，在一个时间片内的线程代码运行时，其他线程处于挂起状态。我们称之为并发。
		  
--	并行：当系统有一个以上CPU核，则可以一个CPU核执行一个线程，另一个CPU核执行另一个线程，两个线程真正同时执行，称之为并行。

--	并发和并行是两个不同意义的概念

--	CPU核数跟多线程的关系，单核CPU适合多线程吗？是不是几个核的CPU开几个线程最合适？

	进程之间相互独立，不共享内存和数据；线程之间内存和数据公共共享，每个线程只有自己的一组CPU指令、寄存器和堆栈（即对于线程来说，
	只有CPU里面的东西是自己独享的（这句话可能不严谨），程序中其他的东西都是跟同一个进程里的其他线程共享的）。
	
	操作系统创建进程的时候要分配很多外部资源，开销很大
	
	假设一个极端情况：在一台单核计算机上只运行两个程序A和B，每个程序是一个进程，单核CPU的时候，AB交替运行，具体的时间分配跟AB的
	线程数有关，因为线程是CPU级别的，如果A有5个线程，B也有5个线程，那么CPU分别时间应该1:1的；如果A有15个线程，B有5个线程，那么时
	间分配比例大概为3:1.所以此时如果A的线程数多，那么获取的CPU执行次数就多，处理速度也就快了。以上假设的前提是：AB优先级相同，且
	A和B都只消耗CPU资源，不涉及其他资源消耗。
	
	如果使用双核计算机，则A和B分别分配到核1和核2上。就算B处理完了且A尚未处理完，由于同一进程同一时刻只能在一个CPU核运行，之后核2
	将进入空闲态，由核1单独继续处理完A进程。（不严谨）
	
	上述只是消耗CPU资源，但实际情况中总要跟别的资源打交道，比如读文件，查数据库，访问网络等等。这个时候多线程才真正发挥出优势。
	在一个进程中，线程a去读取文件，线程b去查数据库，线程c去访问网络，a先用一下CPU，然后取读取文件，此时CPU空闲，b就用一下，然
	后去查数据库....，相对于读取文件，查数据库，访问网络来说，CPU计算时间几乎可以忽略不计！所以多线程实际上是计算机多种资源的
	并行使用！跟CPU有几个核心是没什么关系的。